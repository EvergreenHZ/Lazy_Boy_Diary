#+TITLE: QUESTIONS
#+DATE: <2018-09-24 Mon>

* Virtual hosting: hosting multiple domain names.
  Name-based virtual hosts use multiple host names for the same IP address.

* Load balancing (server farm/pool)
  one domain name with multiple IP addresses.
  received request -> balancer redirect the request to one of the servers.

* multiple clients simultaneously connect to the same server.
  socket is defined: <IP : port>
  one connection is defined: (<client IP : client port>, <server IP : server port>)
  so for each connection, there is no ambiguity.
  ports are for multiplexing IP address.
  stateless: UDP; statefule: TCP
   
* Machine Independent Date Representation
  External Data Representation (XDR) is a standard data serialization format.
  make a standard protocal.
   
* Program status word
  The 64-bit PSW describes (among other things)
  Interrupt masks
  Privilege states
  Condition code
  Instruction address
    
* Memory Address Register (MAR)
  MAR holds the memory location of data that needs to be accessed
  MDR (memory data register)
  suppose each data is a vector with magnitude and direction
  then MAR stores direction & MDR stors magnitude
   
* TRAP vs INTERRUPT
  A trap is an exception in a user process. 
  It's caused by division by zero or invalid memory access.
  It's also the usual way to invoke a kernel routine (a system call) because those run with a higher priority than user code.
  Handling is synchronous (so the user code is suspended and continues afterwards).
  In a sense they are "active" - most of the time, the code expects the trap to happen and relies on this fact.
  
  An interrupt is something generated by the hardware (devices like the hard disk, graphics card, I/O ports, etc). 
  These are asynchronous (i.e. they don't happen at predictable places in the user code) 
  or "passive" since the interrupt handler has to wait for them to happen eventually.

* Interrupts vs Exceptions
  Interrupts: with respect to hardward and asynchronous.
  Exceptions: with respect to instructions detected by processor.
  And Exceptions can be classfied by faults, aborts and traps.
  traps: system calls are trapso

* Kernel stack and User stack
  there is nothing different in two stacks
  
* Why is [ a separate ] kernel stack used
  'cause kernel doesn't trust user mode (SS, ESP)
  
* context switch definition:
  - A context switch (also sometimes referred to as a process switch or a task switch)
    is the switching of the CPU (central processing unit) from one process or thread to another.

* When context switching happens
  - multitasking
    - run out of time slice
    - preempt
    - mode switch doesn't mean context switch. check[[https://stackoverflow.com/questions/9238326/system-call-and-context-switch][ here]] 

* ISR: Interrupt Service Routine 
  
* Interrupts: (asynchronous)
  - forget this: (Soft Interrupt: usually used by a program in user mode (divided by 0))
  - Hardware Interrupt: caused by hardware, e.g., keyboard and mouse.
  - P.S.

* Events causing mode switches
  - System calls: issued by user processes to request system services
  - Exceptions: illegal instructions (e.g., division by 0)
  - Interrupts: raised by devices to get OS attention

* Attention:
  - system calls don't necessarily require context switch. (e.g. ask for date)
  - generally, you can distinguish interrupts and exception by sources
    (i.e. interrupts are caused by PCI and usually asynchronous;
    exceptions are caused by internal CPU and usually synchronous.
    also, exceptions can be clarified by traps, faults and aborts)
  - users can't access kernel mode, and they have to use system calls or traps to
    to trap into kernel and ask for service.
  - system calls can be interrupts by signals (e.g. SIGINT.)
  - Not all interrupts are system calls.
  - It depends when it comes to say that all system calls are interrupts.
  - Interrupts can lead to context switching.
    
* INTERRUPTS: 
  - In system programming, an interrupt is a signal to the processor emitted by hardware 
  or software indicating an event that needs immediate attention.

* TRAP and system calls
  - trap is assembler instruction and system call is high level API.
  - so, system call may need trap instruction to trap into kernel.
    
* Thread switch
  - check [[https://stackoverflow.com/questions/12630214/context-switch-internals][here]].
 
* User Threads & Kernel Threads
  - Kernel threads are really scheduled by CPU,
    user threads are running on Kernel threads.
  - Kernel only knows kernel Threads & schedule them
    
* WPA & WEB : they are about network security access
** WPA: wi-fi protected access
** WEB: wired equivalent privacy


* BSSID, SSID, ESSID
  * BSSID: basic service set id: MAC address of a AP
  * 
* Write a static novel_main_page.

* SIGHUP
  
* Orphan child & Zombie child
  
* How Linux implements signal mechanism
  
* Selective class homework
* Re-entrant (pure procedure)
  - This concept comes from the time when no multitasking OS exited.
  - re-entrant is just for only one thread.
  - Reentrant code may not hold any static or global non-constant data.
  - Reentrant code may not modify itself.
  - Reentrant code may not call non-reentrant computer programs or routines.
    
* Thread-safe: need synchronization
* Kernel itself is not a process
  - processes should be managed by schduler()
    
* Priviliged Instructions & Regular instructions
  - Switch from user to kernel mode
    Unprivileged because it's how applications invoke system calls. The catch is the
    application cannot control where the program counter goes when this switch
    happens.
  - Read the clock
    Unprivileged, every process should be able to read the clock.
  - Clear locations in virtual memory
    Unprivileged because this only harms the process calling it
  - Turn off interrupts
    Privileged so that a process cannot monopolize the cpu
  - Actually, all I/O related instructions should be privileged.
  - Which instructions should not be permitted in the user mode? Explain your answer
    in one or two sentences per each.
    a) Perform a trap.
    b) Read device register for a given device.
    c) Read the time of day clock.
    d) Disable all interrupts.
    Answer: d) and maybe b)
    a) User programs can perform a switch to kernel mode at any time either
    voluntarily by performing a system call, or involuntarily by performing an
    unexpected trap. The latter may happen, for instance, when the user program
    references a null pointer.
    b) Whether this is permissible depends on the device and depends on the register.
    It is ok to read the status bits to see if a floppy is mounted. It is not ok to read a
    device register that holds data that may belong to another user.
    c) Can be permitted in the user mode, because reading the time of day clock is not
    a privileged operation.
    d) Should not be permitted in the user mode, because interrupts must be handled
    on behalf of the operating system, it’s not safe for user programs to be able to
    service or ignore interrupts, nor is it safe for them to have raw access to devices.
  -  if there are any instructions that could alter some parts of OS or any of your resources ,
       IO systems ,they are marked “PRIVILEGED”
* Exceptions, faults, traps, interrupts
  - check [[https://stackoverflow.com/questions/16649824/the-relation-between-privileged-instructions-traps-and-system-calls][here]]
    
* more about privileged instructions
  + check following
    - [[http://www.cs.princeton.edu/courses/archive/spr01/cs217/slides/21.os.pdf][here]]
    - [[https://www.cs.princeton.edu/courses/archive/fall10/cos318/lectures/OSStructure.pdf][here]]
    - [[http://www.edwardbosworth.com/My5155_Slides/Chapter09/SupportForSecurity.pdf][here]]
      
* kernel threads:
  - check [[https://stackoverflow.com/questions/26324668/why-does-os-require-maintain-kernel-threads][here]]
  - two things:
    + threads that run on kernel and do some special system work (say some daemon)
    + threads that are used to manage user threads
