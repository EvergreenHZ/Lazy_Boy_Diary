# those are some test expressions
# try awk

awk '$3 > 0 { print $1, $2 * $3 }' emp.data

# awk 'program' input files

# print every line
{ print }
{ print $0}

# NF: number of fields
{ print NF, $1, $NF}

# compute and print
{ print $1, $2 * $3 }

# print line numbers
{ print NR, $0 }

# put text in the output
{ print "total pay for", $1, "is", $2 * $3}

# selection and combination of patterns
/susie/

# BEGIN and END
BEGIN { print "NAME     RATE    HOURS"; print ""}
        { print }

# counting
$3 > 15 { emp = emp +  1}
END     { print emp, "employees worked more than 15 hours"}

# text, string cat, print last line...

# built-in funcs: length

# control flow

# this works fine
# if else
$2 > 6 { n = n + 1; pay = pay + $2 * $3 }
END    { if (n > 0) {
                print n, "employees, total pay is", pay,
                        "average pay is", pay/n
         } else {
                 print "no employees are paid more than $6/hour"
         }
        }


# interest1 - compute compound interest
#       input: amount rate years
#       output: compounded value at the end of each year

# while loop
{
        i = 1
        while (i < $3) {
                printf("\t%.2f\n", $1 * (1 + $2) ^ i)
                i = i + 1
        }
}

# for loop
{
        for (int i = 1; i < $3; i = i + 1) {
                printf("\t%.2f\n", $1 * (1 + $2) ^ i);
        }
}

# ARRAY
# reverse the order by line
        { line[NR] = $0}        # remember each input line

END     { i = NR
          while (i > 0) {
                  print line[i]
                  i = i - 1
                  }
        }

         awk -F "," '{(=""; print $0}' 15-16Team_Per_Game_Stat.csv >  self
